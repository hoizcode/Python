import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import pandas as pd
from datetime import datetime

# ----------------------------------------
# Parameters
# ----------------------------------------
PRICE_SLOPE_THRESHOLD = 0.001  # normalized slope threshold for price
VOLUME_SLOPE_THRESHOLD = 0.01  # threshold for volume slope
RECENT_DAYS = 10

# ----------------------------------------
# Fetch stock data
# ----------------------------------------
def fetch_data(ticker, period='30d', interval='1d'):
    try:
        stock = yf.Ticker(ticker)
        data = stock.history(period=period, interval=interval)
        if data.empty:
            print(f"No data found for {ticker}. Please check the symbol.")
            return None
        return data
    except Exception as e:
        print(f"Error fetching data for {ticker}: {e}")
        return None

# ----------------------------------------
# Detect trend by normalized linear regression slope
# ----------------------------------------
def detect_trend(series, threshold=PRICE_SLOPE_THRESHOLD, is_volume=False):
    values = series.values
    x = np.arange(len(values))
    slope, intercept = np.polyfit(x, values, 1)
    avg_value = np.mean(values)

    if avg_value == 0:
        normalized_slope = 0
    else:
        normalized_slope = slope / avg_value if not is_volume else slope

    # For price: use normalized slope, for volume: use raw slope with threshold
    if is_volume:
        if normalized_slope > VOLUME_SLOPE_THRESHOLD:
            trend = "uptrend"
        elif normalized_slope < -VOLUME_SLOPE_THRESHOLD:
            trend = "downtrend"
        else:
            trend = "sideways"
    else:
        if normalized_slope > threshold:
            trend = "uptrend"
        elif normalized_slope < -threshold:
            trend = "downtrend"
        else:
            trend = "sideways"

    return normalized_slope, trend

# ----------------------------------------
# Calculate confidence level based on slope magnitude
# ----------------------------------------
def confidence_level(slope, threshold):
    magnitude = abs(slope)
    if magnitude > 3 * threshold:
        return "High"
    elif magnitude > threshold:
        return "Medium"
    else:
        return "Low"

# ----------------------------------------
# Analyze combined price and volume trends with confidence and alerts
# ----------------------------------------
def analyze_trend(df):
    recent = df.tail(RECENT_DAYS)
    print(f"Analyzing last {RECENT_DAYS} days from {recent.index[0].date()} to {recent.index[-1].date()}")

    price_slope, price_trend = detect_trend(recent['Close'], PRICE_SLOPE_THRESHOLD, is_volume=False)
    volume_slope, volume_trend = detect_trend(recent['Volume'], is_volume=True)

    price_conf = confidence_level(price_slope, PRICE_SLOPE_THRESHOLD)
    volume_conf = confidence_level(volume_slope, VOLUME_SLOPE_THRESHOLD)

    print(f"Price slope (normalized): {price_slope:.6f} -> {price_trend} (Confidence: {price_conf})")
    print(f"Volume slope: {volume_slope:.4f} -> {volume_trend} (Confidence: {volume_conf})")

    if price_trend == "uptrend" and volume_trend == "uptrend":
        trend_message = f"Likely Uptrend üìà (Price and Volume rising) - Confidence: Price({price_conf}), Volume({volume_conf})"
        alert = "Strong Buy Signal! üöÄ" if price_conf == "High" and volume_conf == "High" else None
    elif price_trend == "downtrend" and volume_trend == "downtrend":
        trend_message = f"Likely Downtrend üìâ (Price and Volume falling) - Confidence: Price({price_conf}), Volume({volume_conf})"
        alert = "Strong Sell Signal! ‚ö†Ô∏è" if price_conf == "High" and volume_conf == "High" else None
    elif price_trend == "uptrend" and volume_trend == "downtrend":
        trend_message = f"Price Up but Volume Down ‚Äî Possible Weak Uptrend ü§î - Confidence: Price({price_conf}), Volume({volume_conf})"
        alert = None
    elif price_trend == "downtrend" and volume_trend == "uptrend":
        trend_message = f"Price Down but Volume Up ‚Äî Possible Weak Downtrend ü§î - Confidence: Price({price_conf}), Volume({volume_conf})"
        alert = None
    else:
        trend_message = "No Clear Trend üòê"
        alert = None

    return trend_message, alert, {
        'price_slope': price_slope,
        'volume_slope': volume_slope,
        'price_trend': price_trend,
        'volume_trend': volume_trend,
        'price_confidence': price_conf,
        'volume_confidence': volume_conf,
        'start_date': recent.index[0].date(),
        'end_date': recent.index[-1].date(),
        'ticker_close_prices': recent['Close'].values,
        'ticker_volumes': recent['Volume'].values
    }

# ----------------------------------------
# Plot price and volume charts with date formatting
# ----------------------------------------
def plot_stock(df, ticker):
    try:
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), sharex=True)

        # Price plot
        ax1.plot(df.index, df['Close'], label='Close Price', color='blue')
        ax1.plot(df.index, df['Close'].rolling(5).mean(), label='5-Day MA', linestyle='--', color='orange')
        ax1.set_title(f"{ticker} - Closing Prices")
        ax1.set_ylabel("Price")
        ax1.grid(True)
        ax1.legend()

        # Volume plot with 5-day MA
        ax2.bar(df.index, df['Volume'], color='grey', alpha=0.6, label='Volume')
        ax2.plot(df.index, df['Volume'].rolling(5).mean(), label='5-Day MA Volume', color='red')
        ax2.set_title(f"{ticker} - Volume")
        ax2.set_ylabel("Volume")
        ax2.grid(True)
        ax2.legend()

        # Format x-axis dates
        fig.autofmt_xdate()

        plt.tight_layout()
        plt.show()
    except Exception as e:
        print(f"Error plotting data: {e}")

# ----------------------------------------
# Clear console helper
# ----------------------------------------
def clear_console():
    if os.name == 'nt':  # Windows
        os.system('cls')
    else:
        if 'TERM' in os.environ:
            os.system('clear')
        else:
            pass

# ----------------------------------------
# Main execution loop
# ----------------------------------------
def main():
    try:
        while True:
            ticker = input("Enter stock ticker (e.g., AAPL): ").upper().strip()
            clear_console()

            df = fetch_data(ticker)
            if df is not None:
                # Show current price (last closing price)
                current_price = df['Close'].iloc[-1]
                print(f"Current price for {ticker}: ${current_price:.2f}")

                trend_message, alert, analysis_data = analyze_trend(df)
                print("Trend Analysis Result:", trend_message)
                if alert:
                    print(f"*** ALERT: {alert} ***")
                plot_stock(df, ticker)

            input("\nPress Enter to analyze another stock, or press Ctrl+C to exit...")
            clear_console()

    except KeyboardInterrupt:
        print("\nProgram interrupted by user. Exiting gracefully.")
        sys.exit(0)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
